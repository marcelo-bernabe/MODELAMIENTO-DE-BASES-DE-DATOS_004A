SET DEFINE OFF;
-- ==========================
-- 1) Secuencias / Identity
-- ========================== 

CREATE SEQUENCE seq_salud
  START WITH 2050
  INCREMENT BY 10
  NOCACHE NOCYCLE;

CREATE SEQUENCE seq_empleado
  START WITH 750
  INCREMENT BY 3
  NOCACHE NOCYCLE;

-- ==========================
-- 2) Tablas (REGION, COMUNA, AFP, SALUD, MEDIO_PAGO, MARCA, CATEGORIA, PROVEEDOR)
-- ==========================
CREATE TABLE REGION (
  id_region NUMBER(4) NOT NULL,
  nom_region VARCHAR2(255),
  CONSTRAINT REGION_PK PRIMARY KEY (id_region)
);

CREATE TABLE COMUNA (
  id_comuna NUMBER(4) NOT NULL,
  nom_comuna VARCHAR2(100),
  cod_region NUMBER(4) NOT NULL,
  CONSTRAINT COMUNA_PK PRIMARY KEY (id_comuna),
  CONSTRAINT COMUNA_FK_REGION FOREIGN KEY (cod_region) REFERENCES REGION(id_region)
);

CREATE TABLE AFP (
  id_afp NUMBER(5) GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 210 INCREMENT BY 6) NOT NULL,
  nom_afp VARCHAR2(255),
  CONSTRAINT AFP_PK PRIMARY KEY (id_afp)
);

CREATE TABLE SALUD (
  id_salud NUMBER(4) NOT NULL,
  nom_salud VARCHAR2(40),
  CONSTRAINT SALUD_PK PRIMARY KEY (id_salud)
);

CREATE TABLE MEDIO_PAGO (
  id_mpago NUMBER(3) NOT NULL,
  nombre_mpago VARCHAR2(50),
  CONSTRAINT MEDIO_PAGO_PK PRIMARY KEY (id_mpago)
);

CREATE TABLE MARCA (
  id_marca NUMBER(3) NOT NULL,
  nombre_marca VARCHAR2(25) NOT NULL,
  CONSTRAINT MARCA_PK PRIMARY KEY (id_marca)
  -- UNIQUE constraint se agregará con ALTER TABLE según instrucciones
);

CREATE TABLE CATEGORIA (
  id_categoria NUMBER(3) NOT NULL,
  nombre_categoria VARCHAR2(255),
  CONSTRAINT CATEGORIA_PK PRIMARY KEY (id_categoria)
);

CREATE TABLE PROVEEDOR (
  id_proveedor NUMBER(5) NOT NULL,
  nombre_proveedor VARCHAR2(150),
  rut_proveedor VARCHAR2(12),
  telefono VARCHAR2(15),
  email VARCHAR2(200),
  direccion VARCHAR2(200),
  cod_comuna NUMBER(4),
  CONSTRAINT PROVEEDOR_PK PRIMARY KEY (id_proveedor),
  CONSTRAINT PROVEEDOR_FK_COMUNA FOREIGN KEY (cod_comuna) REFERENCES COMUNA(id_comuna)
  -- UNIQUE on email added later via ALTER TABLE
);

-- ==========================
-- 3) Tabla PRODUCTO (depende MARCA, CATEGORIA, PROVEEDOR)
-- ==========================
CREATE TABLE PRODUCTO (
  id_producto NUMBER(4) NOT NULL,
  nombre_producto VARCHAR2(100) NOT NULL,
  precio_unitario NUMBER(12,2),
  origen_nacional CHAR(1),
  stock_minimo NUMBER(3),
  activo CHAR(1) DEFAULT 'S',
  cod_marca NUMBER(3),
  cod_categoria NUMBER(3),
  cod_proveedor NUMBER(5),
  CONSTRAINT PRODUCTO_PK PRIMARY KEY (id_producto),
  CONSTRAINT PRODUCTO_FK_MARCA FOREIGN KEY (cod_marca) REFERENCES MARCA(id_marca),
  CONSTRAINT PRODUCTO_FK_CATEGORIA FOREIGN KEY (cod_categoria) REFERENCES CATEGORIA(id_categoria),
  CONSTRAINT PRODUCTO_FK_PROVEEDOR FOREIGN KEY (cod_proveedor) REFERENCES PROVEEDOR(id_proveedor)
);

-- ==========================
-- 4) Tabla EMPLEADO (usa seq_empleado para id en inserts)
-- ==========================
CREATE TABLE EMPLEADO (
  id_empleado NUMBER(4) NOT NULL,
  rut_empleado VARCHAR2(12),
  nombre_empleado VARCHAR2(25),
  apellido_paterno VARCHAR2(25),
  apellido_materno VARCHAR2(25),
  fecha_contratacion DATE,
  sueldo_base NUMBER(10,2),
  bono_jefatura NUMBER(10,2),
  activo CHAR(1) DEFAULT 'S',
  tipo_empleado VARCHAR2(25),
  cod_empleado NUMBER(4), -- referencia a jefe/administrativo (jerarquía)
  cod_salud NUMBER(4),
  cod_afp NUMBER(5),
  CONSTRAINT EMPLEADO_PK PRIMARY KEY (id_empleado),
  CONSTRAINT EMPLEADO_FK_SALUD FOREIGN KEY (cod_salud) REFERENCES SALUD(id_salud),
  CONSTRAINT EMPLEADO_FK_AFP FOREIGN KEY (cod_afp) REFERENCES AFP(id_afp),
  CONSTRAINT EMPLEADO_FK_EMPLEADO FOREIGN KEY (cod_empleado) REFERENCES EMPLEADO(id_empleado)
);

-- ==========================
-- 5) Subtipo VENDEDOR (clave FK a EMPLEADO)
-- ==========================
CREATE TABLE VENDEDOR (
  id_empleado NUMBER(4) NOT NULL,
  comision_venta NUMBER(5,2),
  CONSTRAINT VENDEDOR_PK PRIMARY KEY (id_empleado),
  CONSTRAINT VENDEDOR_FK_EMPLEADO FOREIGN KEY (id_empleado) REFERENCES EMPLEADO(id_empleado)
);

-- ==========================
-- 6) Tabla VENTA (identity)
-- ==========================
CREATE TABLE VENTA (
  id_venta NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5050 INCREMENT BY 3) NOT NULL,
  fecha_venta DATE,
  total_venta NUMBER(12,2),
  cod_mpago NUMBER(3),
  cod_empleado NUMBER(4),
  CONSTRAINT VENTA_PK PRIMARY KEY (id_venta),
  CONSTRAINT VENTA_FK_EMPLEADO FOREIGN KEY (cod_empleado) REFERENCES EMPLEADO(id_empleado),
  CONSTRAINT VENTA_FK_MEDIO_PAGO FOREIGN KEY (cod_mpago) REFERENCES MEDIO_PAGO(id_mpago)
);

-- ==========================
-- 7) DETALLE_VENTA (join VENTA x PRODUCTO)
-- ==========================
CREATE TABLE DETALLE_VENTA (
  cod_venta NUMBER(10) NOT NULL,
  cod_producto NUMBER(4) NOT NULL,
  cantidad NUMBER(6),
  CONSTRAINT DETALLE_VENTA_PK PRIMARY KEY (cod_venta, cod_producto),
  CONSTRAINT DET_VENTA_FK_VENTA FOREIGN KEY (cod_venta) REFERENCES VENTA(id_venta),
  CONSTRAINT DET_VENTA_FK_PRODUCTO FOREIGN KEY (cod_producto) REFERENCES PRODUCTO(id_producto)
);

-- ==========================
-- 8) Reglas de negocio via ALTER TABLE (según Caso 2)
-- ==========================
-- 8.1 Sueldo mínimo en EMPLEADO >= 400000
ALTER TABLE EMPLEADO
  ADD CONSTRAINT EMPE_CK_SUELDO_MIN CHECK (sueldo_base >= 400000);

-- 8.2 Comisión vendedor entre 0 y 0.25
ALTER TABLE VENDEDOR
  ADD CONSTRAINT VEND_CK_COMISION CHECK (comision_venta BETWEEN 0 AND 0.25);

-- 8.3 PRODUCTO.stock_minimo al menos 3
ALTER TABLE PRODUCTO
  ADD CONSTRAINT PROD_CK_STOCKMIN CHECK (stock_minimo >= 3);

-- 8.4 UNIQUE en PROVEEDOR.email
ALTER TABLE PROVEEDOR
  ADD CONSTRAINT PROV_UNQ_EMAIL UNIQUE (email);

-- 8.5 UNIQUE en MARCA.nombre_marca
ALTER TABLE MARCA
  ADD CONSTRAINT MARCA_UNQ_NOMBRE UNIQUE (nombre_marca);

-- 8.6 DETALLE_VENTA.cantidad > 0
ALTER TABLE DETALLE_VENTA
  ADD CONSTRAINT DET_CK_CANT CHECK (cantidad > 0);

-- ==========================
-- 9) Poblamiento de datos (ejemplos)
-- Ejecutar en orden: REGION -> COMUNA -> PROVEEDOR -> MARCA -> CATEGORIA -> AFP -> SALUD -> MEDIO_PAGO -> EMPLEADO -> VENDEDOR -> PRODUCTO -> VENTA -> DETALLE_VENTA
-- ==========================

-- REGIONES
INSERT INTO REGION (id_region, nom_region) VALUES (1, 'Región de Los Lagos');
INSERT INTO REGION (id_region, nom_region) VALUES (2, 'Región Metropolitana');

-- COMUNAS
INSERT INTO COMUNA (id_comuna, nom_comuna, cod_region) VALUES (101, 'Puerto Montt', 1);
INSERT INTO COMUNA (id_comuna, nom_comuna, cod_region) VALUES (102, 'Puerto Varas', 1);
INSERT INTO COMUNA (id_comuna, nom_comuna, cod_region) VALUES (201, 'Santiago', 2);

-- PROVEEDORES
INSERT INTO PROVEEDOR (id_proveedor, nombre_proveedor, rut_proveedor, telefono, email, direccion, cod_comuna)
 VALUES (10001, 'Distribuciones Sur', '76.123.456-7', '652234567', 'contacto@distrosur.cl', 'Av. Principal 123', 101);

INSERT INTO PROVEEDOR (id_proveedor, nombre_proveedor, rut_proveedor, telefono, email, direccion, cod_comuna)
 VALUES (10002, 'Alimentos Norte', '77.234.567-8', '652333444', 'ventas@alimentosnorte.cl', 'Calle Falsa 45', 201);

-- MARCAS
INSERT INTO MARCA (id_marca, nombre_marca) VALUES (10, 'DoñaMarta');
INSERT INTO MARCA (id_marca, nombre_marca) VALUES (11, 'Naturales');

-- CATEGORIAS
INSERT INTO CATEGORIA (id_categoria, nombre_categoria) VALUES (1, 'Abarrotes');
INSERT INTO CATEGORIA (id_categoria, nombre_categoria) VALUES (2, 'Lácteos');

-- AFP (identity column) -> insertar proporcionando nom_afp
INSERT INTO AFP (nom_afp) VALUES ('AFP Modelo');
INSERT INTO AFP (nom_afp) VALUES ('Habitat');

-- SALUD (usar seq_salud para id)
INSERT INTO SALUD (id_salud, nom_salud) VALUES (seq_salud.NEXTVAL, 'Fonasa');
INSERT INTO SALUD (id_salud, nom_salud) VALUES (seq_salud.NEXTVAL, 'Isapre Vida');

-- MEDIO_PAGO
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (1, 'Efectivo');
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (2, 'Transferencia');
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (3, 'Tarjeta Débito');

-- EMPLEADOS (usar seq_empleado)
-- NOTA: id_empleado generado con seq_empleado.NEXTVAL
INSERT INTO EMPLEADO (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno, fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_salud, cod_afp)
 VALUES (seq_empleado.NEXTVAL, '12.345.678-9', 'María', 'González', 'Rojas', TO_DATE('2021-03-15','YYYY-MM-DD'), 450000, 35000, 'S', 'ADMINISTRATIVO', 2050, 211);

INSERT INTO EMPLEADO (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno, fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_salud, cod_afp)
 VALUES (seq_empleado.NEXTVAL, '11.111.111-1', 'Pedro', 'Soto', 'López', TO_DATE('2022-01-10','YYYY-MM-DD'), 600000, NULL, 'S', 'VENDEDOR', 2060, 217);

INSERT INTO EMPLEADO (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno, fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_salud, cod_afp)
 VALUES (seq_empleado.NEXTVAL, '10.222.333-4', 'Ana', 'Vargas', 'Mena', TO_DATE('2020-08-01','YYYY-MM-DD'), 800000, 50000, 'S', 'JEFE', 2050, 211);

INSERT INTO EMPLEADO (id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno, fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado, cod_salud, cod_afp)
 VALUES (seq_empleado.NEXTVAL, '19.987.654-3', 'Luis', 'Pérez', 'Diaz', TO_DATE('2023-06-20','YYYY-MM-DD'), 420000, NULL, 'N', 'VENDEDOR', 2060, 217);

-- OBS: Los valores cod_afp usados arriba (211, 217 etc.) deben existir en AFP: como usamos identity, consultad la tabla AFP para ver los ids
-- Para asegurar integridad en este script de ejemplo, vamos a consultar los ids de AFP reales y ajustarlos si es necesario.
-- (En práctica: ejecutar un SELECT a AFP para ver los id_afp).

-- VENDEDOR (asociamos a uno de los empleados insertados)
-- Necesitamos obtener los id_empleado generados. Para este script de ejemplo,
-- asumiremos los valores consecutivos (ej: 750, 753, 756, 759) según seq_empleado START WITH 750 INCREMENT 3
-- Si seq_empleado ya existía, ajusta manualmente o usa SELECT para confirmar.
-- Para que el script sea reproducible, vamos a obtener los últimos valores por SELECT en entorno real.
-- Aquí insertamos ejemplos suponiendo ids asignados: 750, 753, 756
INSERT INTO VENDEDOR (id_empleado, comision_venta) VALUES (750, 0.10);
INSERT INTO VENDEDOR (id_empleado, comision_venta) VALUES (753, 0.20);

-- PRODUCTOS
INSERT INTO PRODUCTO (id_producto, nombre_producto, precio_unitario, origen_nacional, stock_minimo, activo, cod_marca, cod_categoria, cod_proveedor)
 VALUES (1001, 'Arroz 1kg', 1200, 'S', 10, 'S', 10, 1, 10001);

INSERT INTO PRODUCTO (id_producto, nombre_producto, precio_unitario, origen_nacional, stock_minimo, activo, cod_marca, cod_categoria, cod_proveedor)
 VALUES (1002, 'Leche 1L', 900, 'N', 5, 'S', 11, 2, 10002);

-- VENTAS (identity) — insertando dos ventas
INSERT INTO VENTA (fecha_venta, total_venta, cod_mpago, cod_empleado)
 VALUES (SYSDATE - 10, 5000, 1, 753);

INSERT INTO VENTA (fecha_venta, total_venta, cod_mpago, cod_empleado)
 VALUES (SYSDATE - 2, 12000, 2, 750);

-- Para obtener los id_venta generados por identity, en práctica usar RETURNING id_venta INTO :var o SELECT MAX(id_venta)
-- Aquí asumimos ids creados (ej: 5050 y 5053) de acuerdo con identity START WITH 5050 INCREMENT 3.

-- DETALLE_VENTA
INSERT INTO DETALLE_VENTA (cod_venta, cod_producto, cantidad) VALUES (5050, 1001, 2);
INSERT INTO DETALLE_VENTA (cod_venta, cod_producto, cantidad) VALUES (5053, 1002, 3);

-- ==========================
-- 10) Consultas solicitadas (INFORMES)
-- ==========================

-- INFORME 1:
-- Empleados activos (activo = 'S') y con bono distinto de NULL.
-- Columnas: IDENTIFICADOR, NOMBRE COMPLETO, SALARIO, BONIFICACION, SALARIO SIMULADO
-- Orden: SALARIO SIMULADO DESC, luego APELLIDO_PATERNO DESC

SELECT
  e.id_empleado AS IDENTIFICADOR,
  e.nombre_empleado || ' ' || e.apellido_paterno || ' ' || e.apellido_materno AS "NOMBRE COMPLETO",
  e.sueldo_base AS SALARIO,
  e.bono_jefatura AS BONIFICACION,
  (e.sueldo_base + NVL(e.bono_jefatura,0)) AS "SALARIO SIMULADO"
FROM EMPLEADO e
WHERE e.activo = 'S'
  AND e.bono_jefatura IS NOT NULL
ORDER BY (e.sueldo_base + NVL(e.bono_jefatura,0)) DESC, e.apellido_paterno DESC;

-- INFORME 2:
-- Empleados con sueldo entre 550000 y 800000 inclusive.
-- Columnas: EMPLEADO, SUELDO, POSIBLE AUMENTO (8%), SALARIO SIMULADO
-- Orden: SUELDO ASC

SELECT
  e.nombre_empleado || ' ' || e.apellido_paterno || ' ' || e.apellido_materno AS EMPLEADO,
  e.sueldo_base AS SUELDO,
  0.08 AS "POSIBLE AUMENTO",
  (e.sueldo_base * 1.08) AS "SALARIO SIMULADO"
FROM EMPLEADO e
WHERE e.sueldo_base BETWEEN 550000 AND 800000
ORDER BY e.sueldo_base ASC;


COMMIT;
